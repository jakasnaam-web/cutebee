Playersaimbot = nil
local mouse = game.Players.LocalPlayer:GetMouse()
local players = game:GetService("Players")
local localPlayer = players.LocalPlayer
local currentCamera = game:GetService("Workspace").CurrentCamera

-- Circle for FOV
local Drawing = Drawing
local circle = Drawing.new("Circle")

-- Remove UI entirely
if game:GetService("CoreGui"):FindFirstChild('infoplayers') then
    game:GetService("CoreGui").infoplayers:Destroy()
end

-- Update circle function
function updateCircle(Fov, colorCircle)
    if circle.__OBJECT_EXISTS then
        circle.Transparency = 1
        circle.Visible = true
        circle.Thickness = 2
        circle.Color = colorCircle
        circle.NumSides = 100
        circle.Radius = (Fov * 6) / 2
        circle.Filled = false
        circle.Position = Vector2.new(mouse.X, mouse.Y + game:GetService("GuiService"):GetGuiInset().Y)
    end
end

-- Circle render
spawn(function()
    game:GetService("RunService").RenderStepped:Connect(function()
        pcall(function()
            updateCircle(getgenv().setting['Fov'], getgenv().setting['Color'])
        end)
    end)
end)

-- Target selection
spawn(function()
    pcall(function()
        while wait() do
            for i, v in pairs(players:GetPlayers()) do
                if game.Workspace.Characters:FindFirstChild(v.Name) or game.Workspace.Characters:FindFirstChild(v.DisplayName) then
                    if v.Character:FindFirstChild('HumanoidRootPart') then
                        local pos = currentCamera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
                        local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(mouse.X, mouse.Y)).magnitude
                        if magnitude < (getgenv().setting['Fov'] * 6 - 8) / 2 then
                            if magnitude < math.huge then
                                if (v.Character.HumanoidRootPart.Position - localPlayer.Character.HumanoidRootPart.Position).magnitude <= 1000 then
                                    if v.Name ~= localPlayer.Name then
                                        if getgenv().setting['LockPlayers'] == false then
                                            Playersaimbot = v.Name
                                            PlayersPosition = v.Character.HumanoidRootPart.Position
                                            v.Character.HumanoidRootPart.Size = Vector3.new(100,100,100)
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end)
end)

-- Update target position continuously
spawn(function()
    while wait() do
        for i, v in pairs(players:GetPlayers()) do
            if v.Name == Playersaimbot then
                PlayersPosition = v.Character.HumanoidRootPart.Position
            end
        end
    end
end)

-- Hook remotes for aimbot
spawn(function()
    local gg = getrawmetatable(game)
    local old = gg.__namecall
    setreadonly(gg,false)
    gg.__namecall = newcclosure(function(...)
        local method = getnamecallmethod()
        local args = {...}
        if tostring(method) == "FireServer" then
            if tostring(args[1]) == "RemoteEvent" then
                if tostring(args[2]) ~= "true" and tostring(args[2]) ~= "false" then
                    if Playersaimbot ~= nil then
                        args[2] = PlayersPosition
                        return old(unpack(args))
                    end
                end
            end
        end
        return old(...)
    end)
end)

-- Mouse click shooting
mouse.Button1Down:Connect(function()
    pcall(function()
        if Playersaimbot ~= nil then
            local tool = localPlayer.Character:FindFirstChildOfClass("Tool")
            if tool then
                local args = {
                    [1] = PlayersPosition,
                    [2] = players:FindFirstChild(Playersaimbot).Character.HumanoidRootPart
                }
                tool.RemoteFunctionShoot:InvokeServer(unpack(args))
            end
        end
    end)
end)
