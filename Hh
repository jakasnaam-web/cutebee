-- nearest-only aimbot (no FOV circle, no UI)
Playersaimbot = nil
PlayersPosition = nil

local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
local currentCamera = workspace.CurrentCamera
local RunService = game:GetService("RunService")
local mouse = localPlayer:GetMouse()

-- Settings
local MAX_RANGE = 1000        -- maximum range (studs) to consider
local UPDATE_INTERVAL = 0.1   -- seconds between target scans

-- Utility: safe check for humanoidrootpart
local function hasHRP(p)
    if not p then return false end
    local c = p.Character
    if not c then return false end
    local hrp = c:FindFirstChild("HumanoidRootPart")
    return hrp ~= nil
end

-- Find nearest player within MAX_RANGE (by distance to local player's HRP)
spawn(function()
    while true do
        local nearest = nil
        local nearestDist = math.huge
        local myHRP = nil
        pcall(function()
            myHRP = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
        end)
        if myHRP then
            for _, pl in pairs(Players:GetPlayers()) do
                if pl ~= localPlayer and hasHRP(pl) then
                    local ok, dist = pcall(function()
                        return (pl.Character.HumanoidRootPart.Position - myHRP.Position).magnitude
                    end)
                    if ok and dist and dist <= MAX_RANGE and dist < nearestDist then
                        nearestDist = dist
                        nearest = pl
                    end
                end
            end
        end

        if nearest then
            Playersaimbot = nearest                 -- store player object
            PlayersPosition = nearest.Character.HumanoidRootPart.Position
        else
            Playersaimbot = nil
            PlayersPosition = nil
        end

        wait(UPDATE_INTERVAL)
    end
end)

-- Keep PlayersPosition fresh (in case target moves)
spawn(function()
    while true do
        if Playersaimbot and hasHRP(Playersaimbot) then
            pcall(function()
                PlayersPosition = Playersaimbot.Character.HumanoidRootPart.Position
            end)
        else
            PlayersPosition = nil
        end
        wait(0.05)
    end
end)

-- Namecall hook: replace the target arg with PlayersPosition when firing to server.
spawn(function()
    local success, mt = pcall(function() return getrawmetatable(game) end)
    if not success or not mt then return end
    local old = mt.__namecall
    setreadonly(mt, false)
    mt.__namecall = newcclosure(function(self, ...)
        local method = getnamecallmethod()
        local args = {...}

        -- Only change behavior for FireServer calls and only when we have a valid target position
        if method == "FireServer" and PlayersPosition then
            -- the original script attempted to detect a specific RemoteEvent layout.
            -- We'll be conservative: if args[2] exists and is not a boolean/string "true"/"false"
            -- we try replace it with PlayersPosition (common patterns for aim remotes).
            local ok, t2 = pcall(function() return args[2] end)
            if ok and t2 ~= nil then
                -- skip obvious boolean/string toggles
                if type(t2) ~= "boolean" and type(t2) ~= "string" then
                    args[2] = PlayersPosition
                    return old(self, unpack(args))
                end
            end
        end

        return old(self, ...)
    end)
    setreadonly(mt, true)
end)

-- Mouse click: attempt to call tool RemoteFunctionShoot (if present) using PlayersPosition and target HRP
mouse.Button1Down:Connect(function()
    pcall(function()
        if Playersaimbot and PlayersPosition then
            local tool = localPlayer.Character and localPlayer.Character:FindFirstChildOfClass("Tool")
            if tool then
                -- robustly attempt to find either a RemoteFunction named RemoteFunctionShoot or a child named "Shoot" etc.
                local rf = tool:FindFirstChild("RemoteFunctionShoot") or tool:FindFirstChildWhichIsA("RemoteFunction") or tool:FindFirstChild("Shoot")
                local targetHRP = Playersaimbot.Character and Playersaimbot.Character:FindFirstChild("HumanoidRootPart")
                if rf and targetHRP and rf.InvokeServer then
                    local args = { PlayersPosition, targetHRP }
                    pcall(function()
                        rf:InvokeServer(unpack(args))
                    end)
                else
                    -- fallback: try firing a remote event on the tool if present
                    local re = tool:FindFirstChildWhichIsA("RemoteEvent")
                    if re and targetHRP then
                        pcall(function()
                            re:FireServer(PlayersPosition, targetHRP)
                        end)
                    end
                end
            end
        end
    end)
end)
